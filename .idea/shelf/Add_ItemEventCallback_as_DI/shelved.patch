Index: app/src/main/java/com/truecaller/giveapp/model/api/ItemRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.truecaller.giveapp.model.api\n\nimport com.google.firebase.database.*\nimport com.truecaller.giveapp.model.Item\nimport javax.inject.Inject\n\nconst val ITEMS_CHILD = \"items\"\n\nclass ItemRepository @Inject constructor() {\n\n    var itemEventEventCallback: OnItemEventCallback? = null\n\n    private val database: FirebaseDatabase = FirebaseDatabase.getInstance()\n    private val itemDatabaseRef: DatabaseReference = database.reference.child(ITEMS_CHILD)\n\n    fun loadItems() {\n        itemDatabaseRef.addListenerForSingleValueEvent(object : ValueEventListener {\n            override fun onDataChange(dataSnapshot: DataSnapshot) {\n                val items = dataSnapshot.children.mapNotNull { it.getValue(Item::class.java) }\n                itemEventEventCallback?.onItemListLoaded(items)\n            }\n\n            override fun onCancelled(databaseError: DatabaseError) {\n                itemEventEventCallback?.onItemEventError(databaseError.message)\n            }\n        })\n    }\n\n    fun saveItem(item: Item) {\n        itemDatabaseRef.push().setValue(item)\n            .addOnFailureListener { itemEventEventCallback?.onItemEventError(\"Error while adding new item\") }\n    }\n\n    fun updateItem(item: Item) {\n        TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n    }\n\n    fun deleteItem(item: Item) {\n        TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n    }\n\n}\n\ninterface OnItemEventCallback {\n    fun onItemAdded(item: Item)\n\n    fun onItemListLoaded(itemList: List<Item>)\n\n    fun onItemEventError(errorMessage: String)\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/truecaller/giveapp/model/api/ItemRepository.kt	(revision 7f0aac9d37b8f6b633a4c8cefe2998e72968494f)
+++ app/src/main/java/com/truecaller/giveapp/model/api/ItemRepository.kt	(date 1540050036000)
@@ -2,13 +2,12 @@
 
 import com.google.firebase.database.*
 import com.truecaller.giveapp.model.Item
+import dagger.Lazy
 import javax.inject.Inject
 
 const val ITEMS_CHILD = "items"
 
-class ItemRepository @Inject constructor() {
-
-    var itemEventEventCallback: OnItemEventCallback? = null
+class ItemRepository @Inject constructor(val callback: Lazy<OnItemEventCallback>) {
 
     private val database: FirebaseDatabase = FirebaseDatabase.getInstance()
     private val itemDatabaseRef: DatabaseReference = database.reference.child(ITEMS_CHILD)
@@ -17,18 +16,18 @@
         itemDatabaseRef.addListenerForSingleValueEvent(object : ValueEventListener {
             override fun onDataChange(dataSnapshot: DataSnapshot) {
                 val items = dataSnapshot.children.mapNotNull { it.getValue(Item::class.java) }
-                itemEventEventCallback?.onItemListLoaded(items)
+                callback.get().onItemListLoaded(items)
             }
 
             override fun onCancelled(databaseError: DatabaseError) {
-                itemEventEventCallback?.onItemEventError(databaseError.message)
+                callback.get().onItemEventError(databaseError.message)
             }
         })
     }
 
     fun saveItem(item: Item) {
         itemDatabaseRef.push().setValue(item)
-            .addOnFailureListener { itemEventEventCallback?.onItemEventError("Error while adding new item") }
+            .addOnFailureListener { callback.get().onItemEventError("Error while adding new item") }
     }
 
     fun updateItem(item: Item) {
@@ -41,10 +40,3 @@
 
 }
 
-interface OnItemEventCallback {
-    fun onItemAdded(item: Item)
-
-    fun onItemListLoaded(itemList: List<Item>)
-
-    fun onItemEventError(errorMessage: String)
-}
Index: app/src/main/java/com/truecaller/giveapp/presenter/ItemListPresenter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.truecaller.giveapp.presenter\n\nimport com.truecaller.giveapp.model.Item\nimport com.truecaller.giveapp.model.api.ItemRepository\nimport com.truecaller.giveapp.model.api.OnItemEventCallback\nimport com.truecaller.giveapp.view.ItemListView\nimport javax.inject.Inject\n\nclass ItemListPresenter @Inject constructor(\n    private val itemRepository: ItemRepository\n) : BasePresenter<ItemListView>(), OnItemEventCallback {\n\n    init {\n        itemRepository.itemEventEventCallback = this\n    }\n\n    override fun onItemListLoaded(itemList: List<Item>) {\n        view?.showProgress(false)\n        view?.showItemList(itemList)\n    }\n\n    override fun onItemAdded(item: Item) {\n        view?.showProgress(false)\n    }\n\n    override fun onItemEventError(errorMessage: String) {\n        view?.showProgress(false)\n        view?.showError(errorMessage)\n    }\n\n    fun loadItems() {\n        view?.showProgress(true)\n        itemRepository.loadItems()\n    }\n\n    fun addItem() {\n        val item = Item()\n        item.title = \"Cheese\"\n        item.description = \"Gauda cheese for free.\"\n        itemRepository.saveItem(item)\n        view?.showProgress(true)\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/truecaller/giveapp/presenter/ItemListPresenter.kt	(revision 7f0aac9d37b8f6b633a4c8cefe2998e72968494f)
+++ app/src/main/java/com/truecaller/giveapp/presenter/ItemListPresenter.kt	(date 1540050233000)
@@ -5,15 +5,13 @@
 import com.truecaller.giveapp.model.api.OnItemEventCallback
 import com.truecaller.giveapp.view.ItemListView
 import javax.inject.Inject
+import javax.inject.Singleton
 
+@Singleton
 class ItemListPresenter @Inject constructor(
     private val itemRepository: ItemRepository
 ) : BasePresenter<ItemListView>(), OnItemEventCallback {
 
-    init {
-        itemRepository.itemEventEventCallback = this
-    }
-
     override fun onItemListLoaded(itemList: List<Item>) {
         view?.showProgress(false)
         view?.showItemList(itemList)
@@ -34,11 +32,7 @@
     }
 
     fun addItem() {
-        val item = Item()
-        item.title = "Cheese"
-        item.description = "Gauda cheese for free."
-        itemRepository.saveItem(item)
-        view?.showProgress(true)
+        //open screen
     }
 
 }
\ No newline at end of file
Index: app/src/main/java/com/truecaller/giveapp/AppModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.truecaller.giveapp\n\nimport com.truecaller.giveapp.utils.CONTEXT_BG\nimport com.truecaller.giveapp.utils.CONTEXT_UI\nimport dagger.Module\nimport dagger.Provides\nimport kotlinx.coroutines.experimental.Dispatchers\nimport javax.inject.Named\nimport kotlin.coroutines.experimental.CoroutineContext\n\n@Module\nclass AppModule {\n\n    @Provides\n    @Named(CONTEXT_UI)\n    fun uiCoroutineContext(): CoroutineContext = Dispatchers.Main\n\n    @Provides\n    @Named(CONTEXT_BG)\n    fun asyncCoroutineContext(): CoroutineContext = Dispatchers.Default\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/truecaller/giveapp/AppModule.kt	(revision 7f0aac9d37b8f6b633a4c8cefe2998e72968494f)
+++ app/src/main/java/com/truecaller/giveapp/AppModule.kt	(date 1540049649000)
@@ -1,14 +1,17 @@
 package com.truecaller.giveapp
 
+import com.truecaller.giveapp.model.api.OnItemEventCallback
+import com.truecaller.giveapp.presenter.ItemListPresenter
 import com.truecaller.giveapp.utils.CONTEXT_BG
 import com.truecaller.giveapp.utils.CONTEXT_UI
+import dagger.Binds
 import dagger.Module
 import dagger.Provides
 import kotlinx.coroutines.experimental.Dispatchers
 import javax.inject.Named
 import kotlin.coroutines.experimental.CoroutineContext
 
-@Module
+@Module(includes = [AppModule.Declaration::class])
 class AppModule {
 
     @Provides
@@ -19,4 +22,9 @@
     @Named(CONTEXT_BG)
     fun asyncCoroutineContext(): CoroutineContext = Dispatchers.Default
 
+    @Module
+    interface Declaration {
+        @Binds
+        fun callback(impl: ItemListPresenter): OnItemEventCallback
+    }
 }
\ No newline at end of file
Index: app/src/main/java/com/truecaller/giveapp/model/api/OnItemEventCallback.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/truecaller/giveapp/model/api/OnItemEventCallback.kt	(date 1540048229000)
+++ app/src/main/java/com/truecaller/giveapp/model/api/OnItemEventCallback.kt	(date 1540048229000)
@@ -0,0 +1,11 @@
+package com.truecaller.giveapp.model.api
+
+import com.truecaller.giveapp.model.Item
+
+interface OnItemEventCallback {
+    fun onItemAdded(item: Item)
+
+    fun onItemListLoaded(itemList: List<Item>)
+
+    fun onItemEventError(errorMessage: String)
+}
\ No newline at end of file
